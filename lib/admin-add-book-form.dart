import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:literaland/Controller/ApiService.dart';
import 'package:literaland/Model/book.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';

class BookForm extends StatefulWidget {
  final VoidCallback onSubmit;

  const BookForm({Key? key, required this.onSubmit}) : super(key: key);

  @override
  _BookFormState createState() => _BookFormState();
}

class _BookFormState extends State<BookForm> {
  final _formKey = GlobalKey<FormState>();
  final ApiService _apiService = ApiService();
  final _titleController = TextEditingController();
  final _authorController = TextEditingController();
  final _quantityController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _categoryController = TextEditingController();
  File? _authorImage;
  File? _bookImage;

  Future<void> _pickImage(ImageSource source, bool isAuthorImage) async {
    final pickedFile = await ImagePicker().pickImage(source: source);
    if (pickedFile != null) {
      setState(() {
        if (isAuthorImage) {
          _authorImage = File(pickedFile.path);
        } else {
          _bookImage = File(pickedFile.path);
        }
      });
    }
  }

  Future<String> _uploadImageToFirebase(File image, String folder) async {
    final storageRef = FirebaseStorage.instance.ref().child('$folder/${DateTime.now().millisecondsSinceEpoch}.png');
    final uploadTask = storageRef.putFile(image);
    final snapshot = await uploadTask.whenComplete(() {});
    final downloadUrl = await snapshot.ref.getDownloadURL();
    return downloadUrl;
  }

  Future<void> _submitForm() async {
    if (_formKey.currentState!.validate() && _authorImage != null && _bookImage != null) {
      final authorImageUrl = await _uploadImageToFirebase(_authorImage!, 'author_images');
      final bookImageUrl = await _uploadImageToFirebase(_bookImage!, 'book_images');

      final newBook = Book(
        id: 0, // ID will be generated by the server
        title: _titleController.text,
        author: _authorController.text,
        quantity: int.parse(_quantityController.text),
        borrowedBooks: 0,
        description: _descriptionController.text,
        category: _categoryController.text,
        authorImagePath: authorImageUrl,
        bookImagePath: bookImageUrl,
      );

      final response = await _apiService.addBook(newBook);
      if (response['success']) {
        widget.onSubmit();
        Navigator.pop(context);
      } else {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Failed to add book')));
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Add New Book'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                controller: _titleController,
                decoration: InputDecoration(labelText: 'Title'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a title';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _authorController,
                decoration: InputDecoration(labelText: 'Author'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter an author';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _quantityController,
                decoration: InputDecoration(labelText: 'Quantity'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a quantity';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _descriptionController,
                decoration: InputDecoration(labelText: 'Description'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a description';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _categoryController,
                decoration: InputDecoration(labelText: 'Category'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a category';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),
              Text('Author Image'),
              _authorImage == null
                  ? Text('No image selected.')
                  : Image.file(_authorImage!),
              TextButton(
                onPressed: () => _pickImage(ImageSource.gallery, true),
                child: Text('Select Image'),
              ),
              SizedBox(height: 20),
              Text('Book Image'),
              _bookImage == null
                  ? Text('No image selected.')
                  : Image.file(_bookImage!),
              TextButton(
                onPressed: () => _pickImage(ImageSource.gallery, false),
                child: Text('Select Image'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _submitForm,
                child: Text('Add Book'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}